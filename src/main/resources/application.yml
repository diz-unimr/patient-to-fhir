spring:
  jmx:
    enabled: true
  kafka:
    bootstrapServers: ${BOOTSTRAP_SERVERS:localhost:9092}
    security.protocol: ${SECURITY_PROTOCOL:PLAINTEXT}
    ssl:
      trust-store-location: file://${SSL_KEY_STORE_LOCATION_INTERNAL:/opt/patient-to-fhir/ssl/truststore.jks}
      trust-store-password: ${SSL_TRUST_STORE_PASSWORD}
      key-store-location: file://${SSL_KEY_STORE_LOCATION_INTERNAL:/opt/patient-to-fhir/ssl/keystore.jks}
      key-store-password: ${SSL_KEY_STORE_PASSWORD}


  cloud:
    stream:
      function.definition: process
      bindings:
        process-in-0:
          destination: aim-patient
        process-out-0:
          destination: patient-fhir
      kafka:
        streams:
          binder:
            applicationId: patient-to-fhir
            configuration:
              compression.type: gzip
              max.request.size: 5242880
            deserializationExceptionHandler: sendToDlq

fhir:
  systems:
    patientId: "https://fhir.diz.uni-marburg.de/NamingSystem/identifier/PatientId"
  generateNarrative: false
  useConditionalUpdate: false

services:
  pseudonymizer:
    url: "http://localhost:5000/fhir"

management:
  server:
    port: 8090
  endpoints:
    web:
      exposure:
        include: "health, prometheus, info, metric"
  endpoint:
    health:
      show-details: always

logging:
  level:
    org.springframework.kafka.config: info
    de.unimarburg.diz.patienttofhir: ${LOG_LEVEL:info}
