version: "3.7"

services:

  zoo:
    image: zookeeper:3.6.1
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zoo:2888:3888;2181

  kafka:
    image: confluentinc/cp-kafka:5.5.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zoo:2181
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_MESSAGE_MAX_BYTES: 5242880
      KAFKA_REPLICA_FETCH_MAX_BYTES: 5242880
      KAFKA_COMPRESSION_TYPE: gzip
    depends_on:
      - zoo

  kafka-schema-registry:
    image: confluentinc/cp-schema-registry:5.5.0
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:19092
      SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    depends_on:
      - zoo
      - kafka

  kafka-rest-proxy:
    image: confluentinc/cp-kafka-rest:5.5.0
    ports:
      - "8082:8082"
    environment:
      KAFKA_REST_LISTENERS: http://0.0.0.0:8082/
      KAFKA_REST_SCHEMA_REGISTRY_URL: http://kafka-schema-registry:8081/
      KAFKA_REST_HOST_NAME: kafka-rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:19092
      KAFKA_REST_CONSUMER_REQUEST_TIMEOUT_MS: 30000
    depends_on:
      - zoo
      - kafka


  kafka-connect:
    image: confluentinc/cp-kafka-connect:5.5.0
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:19092
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_LOG4J_ROOT_LOGLEVEL: INFO
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_PLUGIN_PATH: /usr/share/java
    depends_on:
      - zoo
      - kafka
      - kafka-rest-proxy

  kafdrop:
    image: obsidiandynamics/kafdrop:3.27.0
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:19092"
      JVM_OPTS: "-Xms32M -Xmx64M"
      SERVER_SERVLET_CONTEXTPATH: "/"

  connect-patient:
    image: byrnedo/alpine-curl:0.1.8
    command: -i -X POST -H "Accept:application/json"
      -H "Content-Type:application/json"
      -d @/connect/connect-patient.json
      --retry-connrefused
      --connect-timeout 10
      --max-time 100
      --retry 10
      --retry-delay 10
      http://kafka-connect:8083/connectors/
    volumes:
      - ./connect/connect-patient.json:/connect/connect-patient.json:ro
    depends_on:
      - kafka-connect
      - aim-db

  fhir-pseudonymizer:
    image: registry.diz.uni-marburg.de/docker/fhir-pseudonymizer:1.6.0
    environment:
      GPAS__URL: ${GPAS_URL:-http://gpas:8080/gpas/gpasService}
    volumes:
      - ./anonymization.yaml:/etc/anonymization.yaml:ro
    ports:
      - 5000:8080
    depends_on:
      - gpas

  gpas:
    image: tmfev/gpas:1.9.1
    environment:
      JAVA_OPTS: >-
        -Xms512m
        -Xmx1G
        -XX:MetaspaceSize=96M
        -XX:MaxMetaspaceSize=256m
        -Djava.net.preferIPv4Stack=true
        -Djava.awt.headless=true

  gpasinit-patient:
    image: curlimages/curl:7.75.0
    command: |
      -X POST
      -H 'Content-Type:application/xml'
      -d '<?xml version="1.0" encoding="UTF-8"?>
          <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:psn="http://psn.ttp.ganimed.icmvc.emau.org/">
            <soapenv:Header/>
              <soapenv:Body>
                <psn:addDomain>
                  <domainDTO>
                    <name>PATIENT</name>
                    <checkDigitClass>org.emau.icmvc.ganimed.ttp.psn.generator.ReedSolomonLagrange</checkDigitClass>
                    <alphabet>org.emau.icmvc.ganimed.ttp.psn.alphabets.Symbol31</alphabet>
                    <properties>PSN_LENGTH=31;PSN_PREFIX=p;INCLUDE_PREFIX_IN_CHECK_DIGIT_CALCULATION=false;PSNS_DELETABLE=true;MAX_DETECTED_ERRORS=2;</properties>
                    <comment>PATIENT Domain</comment>
                  </domainDTO>
                </psn:addDomain>
            </soapenv:Body>
          </soapenv:Envelope>'
      --retry-connrefuse
      --connect-timeout 10
      --max-time 120
      --retry 10
      --retry-delay 10
      http://gpas:8080/gpas/DomainService
    depends_on:
      - gpas

  aim-db:
    image: postgres:11
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=aim
      - POSTGRES_PASSWORD=test
    volumes:
      - ./initdb:/docker-entrypoint-initdb.d:ro
